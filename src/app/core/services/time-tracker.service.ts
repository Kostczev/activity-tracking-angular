import { DataService } from './data.service';
import { Injectable } from '@angular/core';
import { Activity, TimeSlot } from '../interfaces/db.interface';
import { BehaviorSubject, filter, firstValueFrom, interval, map, Observable, of, switchMap } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class TimeTrackerService {
  private currentStartTime$ = new BehaviorSubject<Date | null>(null)
  currentActivityId$ = new BehaviorSubject<number | null>(null);
  currentActivityName$ = new BehaviorSubject<string | null>(null);

  currentDuration$ = this.currentStartTime$.pipe(
    switchMap(startTime =>
      startTime ?
        interval(1000).pipe(
          map(() => this.calculateDuration(startTime))
        ) :
        of('00:00:00')
    )
  );

  currentTimeSlotId: number | null = null

  constructor(private dataService: DataService) {
    this.loadCurrentActivity()
  }

  // –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
  async startActivity(activity: Activity): Promise<void> {
    const startTime = new Date()
    const newSlot: Omit<TimeSlot, 'id'> = {
      activityId: activity.id!,
      startTime: startTime,
      endTime: null,
    };

    console.log('üü¢ START Activity:', {
      activity,
      time: newSlot.startTime
    });

    this.currentActivityId$.next(activity.id!)
    this.currentActivityName$.next(activity.name)
    this.currentStartTime$.next(startTime)
    this.currentTimeSlotId = await this.dataService.addTimeSlot(newSlot)
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
  async stopCurrentActivity(): Promise<void> {
    if (this.currentTimeSlotId === null) {
      // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —Å–ª–æ—Ç –≤ –ë–î
      const activeSlot = await firstValueFrom(
        this.dataService.getLastTimeSlot().pipe(
          filter(slot => slot?.endTime === null)
        )
      );
      if (activeSlot) {
        this.currentTimeSlotId = activeSlot.id!
        console.log('üîç Found active time slot:', this.currentTimeSlotId)
      } else {
        console.warn('‚ö†Ô∏è No active time slot to stop')
        return
      }
    }
    await this.dataService.stopTimeSlot(this.currentTimeSlotId!)
    this.currentActivityId$.next(null)
    this.currentActivityName$.next(null)
    this.currentStartTime$.next(null)
    this.currentTimeSlotId = null
  }

  private async loadCurrentActivity() {
    try {
      console.log('üîÑ Loading current activity from DB...');

      // 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç
      const lastSlot = await firstValueFrom(
        this.dataService.getLastTimeSlot().pipe(
          // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
          filter(slot => slot?.endTime === null)
        )
      );

      if (!lastSlot) {
        console.log('üì≠ No active time slot found');
        return;
      }

      console.log('üìã Found active time slot:', lastSlot);

      // 2. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ ID –∏–∑ —Å–ª–æ—Ç–∞
      const activity = await firstValueFrom(
        this.dataService.getActivityById(lastSlot.activityId)
      );

      if (!activity) {
        console.error('‚ùå Activity not found for ID:', lastSlot.activityId);
        return;
      }

      console.log('üë§ Found activity:', activity.name);

      // 3. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      this.currentActivityId$.next(activity.id!)
      this.currentActivityName$.next(activity.name)
      this.currentStartTime$.next(lastSlot.startTime)
      this.currentTimeSlotId = lastSlot.id!;

      console.log('‚úÖ Current activity restored:', activity.name);

    } catch (error) {
      console.error('‚ùå Error loading current activity:', error);
    }
  }

  private calculateDuration(startTime: Date): string {
    if (!startTime) return '00:00:00';

    const now = new Date();
    const diffMs = now.getTime() - startTime.getTime();

    return this.formatDuration(diffMs);
  }

  private formatDuration(ms: number): string {
    const seconds = Math.floor(ms / 1000) % 60;
    const minutes = Math.floor(ms / (1000 * 60)) % 60;
    const hours = Math.floor(ms / (1000 * 60 * 60));

    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
  }
}
