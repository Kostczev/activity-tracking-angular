import { TimeSlot, Activity, Cluster } from './../interfaces/db.interface';
import { db } from '../db';
import { Injectable } from '@angular/core';
import Dexie, { EntityTable, liveQuery } from 'dexie';
import { catchError, from, map, Observable, of } from 'rxjs';

@Injectable({ providedIn: 'root' })
export class DataService {
    // –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –≤—Å–µ—Ö liveQuery
    private wrapLiveQuery<T>(queryFn: () => Promise<T[]>): Observable<T[]> {
        return new Observable<T[]>(subscriber => {
            const subscription = liveQuery(queryFn).subscribe({
                next: (data) => subscriber.next(data),
                error: (err) => subscriber.error(err),
                complete: () => subscriber.complete()
            });
            return () => subscription.unsubscribe()
        });
    }

    async addTimeSlot(slot: Omit<TimeSlot, 'id'>): Promise<number> {
        console.log('üìù Adding TimeSlot to DB:', slot);
        const newId = await db.timeSlots.add(slot)
        if (newId === undefined) {
            throw new Error('–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∞—Å—Ç–µ—Ä, ID –Ω–µ –ø–æ–ª—É—á–µ–Ω.');
        }

        console.log('‚û°Ô∏è Added with ID:', newId);
        return newId
    }

    async stopTimeSlot(timeSlotId: number): Promise<void> {
        console.log('üìù Updating TimeSlot in DB:', timeSlotId);

        const updatedCount = await db.timeSlots.update(timeSlotId, {
            endTime: new Date()
        });

        console.log('‚úÖ Updated records count:', updatedCount);

        if (updatedCount === 0) {
            console.error('‚ùå No record found with ID:', timeSlotId);
        }
    }

    getLastTimeSlot(): Observable<TimeSlot | null> {
        return from(db.timeSlots.orderBy('id').reverse().first()).pipe(
            map(timeSlot => timeSlot || null),
            catchError(error => of(null))
        );
    }

    getAllTimeSlots(): Observable<TimeSlot[]> {
        return this.wrapLiveQuery(
            () => db.timeSlots.toArray()
        )
    }

    getActivitiesByClusterId(clusterId: number): Observable<Activity[]> {
        return this.wrapLiveQuery(() =>
            db.activities
                .where('clusterId')
                .equals(clusterId)
                .and(activity => activity.isActive === 1)
                .toArray()
        );
    }
    getAllActiveClusters(): Observable<Cluster[]> {
        return this.wrapLiveQuery(() =>
            db.clusters.where('isActive').equals(1).toArray()
        );
    }

    // –ø—ã—Ç–∞–ª—Å—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±—Ä–µ—Ç–∫—É –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–Ω–∏—è –∫–æ–¥–∞ –Ω–∏–∂–µ, –Ω–æ –±–µ–∑ any –æ–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏ –≤ –∫–∞–∫—É—é –Ω –µ–∑–∞—Ö–æ—Ç–µ–ª–∞
    // –∫–æ–Ω—Ñ–ª–∏–∫—Ç —Ç–∏–ø–æ–≤ table EntityTable<T, 'id'> –∏ Omit<T, 'id'>
    // –º–æ–∏—Ö –∑–Ω–∞–Ω–∏–π –Ω–∞ –∫–∞–∫ –ø–æ—á–∏–Ω–∏—Ç—å –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ
    // private async addWithIdCheck(
    //     item: any, 
    //     table: any, 
    //     entityName: string
    // ): Promise<number> {
    //     const newId = await table.add(item);
    //     if (newId === undefined) {
    //         throw new Error(`–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å ${entityName}, ID –Ω–µ –ø–æ–ª—É—á–µ–Ω.`);
    //     }
    //     return newId;
    // }
    // return this.addWithIdCheck(activity, db.activities, '–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å')

    // –º–µ—Ç–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–∫—Ç, –≥–¥–µ id –¢–û–ß–ù–û –ù–ï –î–û–õ–ñ–ù–û –±—ã—Ç—å
    async addActivity(activity: Omit<Activity, 'id'>): Promise<number> {
        const newId = await db.activities.add(activity)
        if (newId === undefined) {
            throw new Error('–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∞—Å—Ç–µ—Ä, ID –Ω–µ –ø–æ–ª—É—á–µ–Ω.');
        }
        return newId
    }

    async addCluster(cluster: Omit<Cluster, 'id'>): Promise<number> {
        const newId = await db.clusters.add(cluster)
        if (newId === undefined) {
            throw new Error('–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∞—Å—Ç–µ—Ä, ID –Ω–µ –ø–æ–ª—É—á–µ–Ω.');
        }
        return newId
    }

    async updateActivity(activity: Activity): Promise<void> {
        if (activity.id === undefined) {
            throw new Error('Cannot update activity without ID');
        }
        await db.activities.update(activity.id, activity);
    }

    getAllClusters(): Observable<Cluster[]> {
        return this.wrapLiveQuery(
            () => db.clusters.toArray()
        );
    }

    async deactivateActivity(activityId: number): Promise<void> {
        await db.activities.update(activityId, { isActive: 0 });
    }

    async activateActivity(activityId: number): Promise<void> {
        await db.activities.update(activityId, { isActive: 1 });
    }

    async permanentlyDeleteActivity(activityId: number): Promise<{ success: boolean; message: string }> {
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤ timeSlots
        const relatedTimeSlots = await db.timeSlots.where('activityId').equals(activityId).count();
        if (relatedTimeSlots > 0) {
            // 2. –ï—Å–ª–∏ –µ—Å—Ç—å, –Ω–µ —É–¥–∞–ª—è–µ–º, –∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
            return {
                success: false,
                message: `–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å. –°—É—â–µ—Å—Ç–≤—É–µ—Ç ${relatedTimeSlots} –∑–∞–ø–∏—Å–µ–π –≤—Ä–µ–º–µ–Ω–∏, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —ç—Ç–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é. –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ –∏—Ö –≤ –∏—Å—Ç–æ—Ä–∏–∏.`
            };
        }
        // 3. –ï—Å–ª–∏ —Å–≤—è–∑–µ–π –Ω–µ—Ç ‚Äî —É–¥–∞–ª—è–µ–º –Ω–∞–≤—Å–µ–≥–¥–∞
        await db.activities.delete(activityId)
        return { success: true, message: '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∞.' }
    }

    getAllActivities(): Observable<Activity[]> {
        return this.wrapLiveQuery(() => db.activities.toArray())
    }

    getAllActiveActivities(): Observable<Activity[]> {
        return this.wrapLiveQuery(() =>
            db.activities.where('isActive').equals(1).toArray()
        )
    }

    async debugActivities() {
        const allActivities = await db.activities.toArray();
        console.log('–í—Å–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –±–∞–∑–µ:', allActivities);
        return allActivities;
    }
}